<?php

namespace Tests\Unit;

use App\Restaurant;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use App\User;

class RestaurantTest extends TestCase
{
    protected $positive_id = 5;
    protected $fixed_id = 6;
    protected $negative_id = -1;
    protected $values = [
        'name' => 'required',
        'address' => ['street' => 'required',
            'locality' => 'required',
            'landmark' => 'required',
            'pincode' => 110025,
            'state_id' => 7,
            'district_id' => 2,],
        'category_id' => 2,
        'cuisine_id' => 4
    ];

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $user = factory(User::class)->create();


        $this->actingAs($user, 'api');
    }

    public function testExample()
    {

        //GET REQUEST TESTING
        $this->assertTrue(true);

        $response = $this->json('GET', 'api/restaurants');

        $response
            ->assertStatus(200);


        //GET(SHOW) REQUEST TESTING
        //Negative test case
        $response = $this->json('GET', 'api/restaurants/' . $this->negative_id);

        $response->assertStatus(200);
        //Positive test case

        $response = $this->json('GET', 'api/restaurants/' . $this->positive_id);


        $response->assertStatus(200);




        //POST REQUEST TESTING
        $response = $this->json('POST', 'api/restaurants', $this->values);

        $response->assertStatus(200);
        $response->assertJson($this->values);
        $this->assertEquals($response->original['name'], $this->values['name']);

        $test = $this->json('GET', 'api/restaurants/' . $response->original['id']);

        $this->assertEquals($test->original['name'], $this->values['name']);

        $this->assertEquals($response->original['id'], $test->original['id']);






        //PUT REQUEST TESTING

        //positive test case
        $response = $this->json('PUT', 'api/restaurants/' . $this->fixed_id, $this->values);

      //  dd($response);

        $this->assertEquals($response->original['name'], $this->values['name']);

        $response->assertStatus(200);
        $this->assertEquals($response->original['name'], $this->values['name']);

        $test = $this->json('GET', 'api/restaurants/' . $response->original['id']);

        $this->assertEquals($response->original['id'], $test->original['id']);

        //negative test case
        $response = $this->json('PUT', 'api/restaurants/' . $this->negative_id,
            $this->values);

        $response->assertStatus(200);







        //DELETE REQUEST TESTING

        //negative test case
        $response = $this->json('DELETE', 'api/restaurants/' . $this->negative_id);
        $response->assertStatus(200);


        //Positive test case
        $response = $this->json('DELETE', 'api/restaurants/' . $this->positive_id);
        $response->assertStatus(200);

        $restaurant = Restaurant::find($this->positive_id);

        $this->assertEquals($restaurant, NULL);
    }

}

//$response->assertJson(['ddj' => 'djdj']);