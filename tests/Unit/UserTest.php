<?php

namespace Tests\Unit;


use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\DatabaseTransactions;
use App\User;
use App\UserAddress;

class UserTest extends TestCase
{

    use DatabaseTransactions;
    protected $address_id, $name, $email, $password;

    protected function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

// $user = User::find(1);
        $user = factory(User::class)->create();
        $userAddress = factory(UserAddress::class)->create();

        $this->address_id = $userAddress->id;


        $this->actingAs($user, 'api');
    }

    /**
     * Gets User details
     *
     * @return void
     */
    public function test_get_user_details()
    {
        $this->assertTrue(true);

        $response = $this->json('GET', '/api/details');

        $response
            ->assertOk();


    }

    public function test_update_user_details()
    {


        $response = $this->json('POST', '/api/details', [
            'name' => 'nisit'
        ])->assertOk();




    }

    public function test_create_user_address()
    {
        $response = $this->json('POST', 'api/useraddress', [
            'street' => 'green street',
            'locality' => 'West London',
            'landmark' => 'West Ham ',
            'pincode' => 123456,
            'state_id' => 1,
            'district_id' => 1,
            'title' => 'home'

        ])
            ->assertOk();

            
        
    }


    public function test_get_user_address_list()
    {
        $resposne = $this->json('GET', 'api/useraddress')
            ->assertOk();
    }

    public function test_get_user_address_show()
    {   
        $userAddress = UserAddress::first();

        $response = $this->json('GET', 'api/useraddress/'.$userAddress->id)
            ->assertOk();
    }

    public function test_user_address_update()
    {
        $userAddress = UserAddress::has('address')->first();

        $response = $this->json('PUT', 'api/useraddress/' . $userAddress->id, [
            'street' => 'green street',
            'locality' => 'West London',
            'landmark' => 'West Ham ',
            'pincode' => 123456,
            'state_id' => 1,
            'district_id' => 1,
            'title' => 'home'

        ])
            ->assertOk()
            ->assertJson(['message' => 'updated']);
        $this
            ->assertEquals('home', $userAddress->title);


    }

    public function test_user_address_delete()
    {   
        $userAddress = UserAddress::first();

        $response = $this->json('DELETE', 'api/useraddress/'. $userAddress->id)
            ->assertJson(['message' => 'Deleted'])
            ->assertOk();

        $this->assertNotEquals(1, $userAddress->id);

    }



}